{"version":3,"sources":["TodoItem.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","todo","onDelete","text","onClick","action","type","payload","initialState","todos","input","types","actions","id","value","reducer","state","ids","map","Math","max","filter","Error","Todo","useReducer","dispatch","placeholder","onChange","e","target","key","App","useEffect","document","title","Fragment","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.04932256.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TodoItem(props) {\r\n  const { todo, onDelete } = props;\r\n  const { text } = todo;\r\n  return (\r\n    <li>\r\n      <button onClick={onDelete}>Delete</button>\r\n      {text}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { useReducer, useEffect } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nfunction action(type, payload) {\r\n  return { type, payload };\r\n}\r\n\r\nconst initialState = {\r\n  todos: [],\r\n  input: '',\r\n};\r\n\r\nconst types = {\r\n  ADD_TODO: 'ADD_TODO',\r\n  DELETE_TODO: 'DELETE_TODO',\r\n  CHANGE_INPUT: 'CHANGE_INPUT',\r\n};\r\n\r\nconst actions = {\r\n  addTodo(text) {\r\n    return action(types.ADD_TODO, text);\r\n  },\r\n  deleteTodo(id) {\r\n    return action(types.DELETE_TODO, id);\r\n  },\r\n  changeInput(value) {\r\n    return action(types.CHANGE_INPUT, value);\r\n  },\r\n};\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case types.ADD_TODO:\r\n      const ids = state.todos.map((todo) => todo.id);\r\n      const maxId = Math.max(...ids, 0);\r\n      const id = maxId + 1;\r\n      return {\r\n        todos: [...state.todos, { id, text: action.payload }],\r\n        input: state.input,\r\n      };\r\n    case types.DELETE_TODO:\r\n      return {\r\n        todos: state.todos.filter((todo) => todo.id !== action.payload),\r\n        input: state.input,\r\n      };\r\n    case types.CHANGE_INPUT:\r\n      return {\r\n        ...state,\r\n        input: action.payload,\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction Todo() {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Todo List</h2>\r\n      <p>Current input: {state.input}</p>\r\n      <input\r\n        type='text'\r\n        placeholder='new todo'\r\n        value={state.input}\r\n        onChange={(e) => dispatch(actions.changeInput(e.target.value))}\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          dispatch(actions.addTodo(state.input));\r\n          dispatch(actions.changeInput(''));\r\n        }}\r\n      >\r\n        Добавить\r\n      </button>\r\n      <ul>\r\n        {state.todos.map((todo) => (\r\n          <TodoItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            onDelete={() => dispatch(actions.deleteTodo(todo.id))}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useEffect } from 'react';\r\nimport Todo from './Todo';\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    document.title = 'Todo React';\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h1>Todo</h1>\r\n      <Todo />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}